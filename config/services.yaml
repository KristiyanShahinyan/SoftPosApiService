# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    type: 'phos'
    ENCRYPTION: '%env(ENCRYPTION)%'
    REQUEST_VERIFICATION: '%env(REQUEST_VERIFICATION)%'
    ENABLE_LOGGER: '%env(bool:ENABLE_LOGGER)%'
    ENABLE_AUDIT_LOGGER: '%env(bool:ENABLE_AUDIT_LOGGER)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\EntityManager\RefreshTokenManager:
        public: true
        arguments:
            - '@gesdinet.jwtrefreshtoken.object_manager'
            - '%gesdinet.jwtrefreshtoken.refresh_token.class%'

    app.aws_encoder:
        class: App\JwtEncoder\AwsEncoder

    app.token_autheticator:
        class: App\Security\TokenAuthenticator

    gesdinet.jwtrefreshtoken.refresh_token_manager:
        class: App\EntityManager\RefreshTokenManager
        public: true
        arguments: [ '@doctrine.orm.default_entity_manager', 'Gesdinet\JWTRefreshTokenBundle\Entity\RefreshToken']

    cloudwatch_handler:
        class: Phos\Logging\CloudWatchHandler
        calls:
            - setAwsClient: [ '@aws.cloudwatchlogs' ]
            - setLogGroupAndStream: [ '%env(AWS_CLOUDWATCH_GROUP)%', '%env(AWS_CLOUDWATCH_STREAM)%' ]

    monolog.formatter.custom_logstash:
        class: Phos\Logging\CustomLogstashFormatter
        arguments:
            $application: 'api-service'
            $requestStack: '@request_stack'
            $requestIdStorage: '@Chrisguitarguy\RequestId\RequestIdStorage'
